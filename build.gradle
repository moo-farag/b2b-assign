apply plugin: 'com.bmuschko.docker-remote-api'
buildscript {
	ext {
		springBootVersion = '2.0.2.RELEASE'
	}
	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('com.github.ksoichiro:gradle-console-reporter:0.5.0')
		classpath 'com.bmuschko:gradle-docker-plugin:2.6.8'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: "jacoco"
apply plugin: "io.spring.dependency-management"
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.ksoichiro.console.reporter'
apply plugin: 'war'

apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'

group = 'com.b2b'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
repositories {
    mavenCentral()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile ("org.springframework.boot:spring-boot-starter-web") {
		exclude module: 'spring-boot-starter-tomcat'
	}
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
	compile('org.liquibase:liquibase-core')
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('mysql:mysql-connector-java')
	testCompile('com.h2database:h2')
	testCompile('org.springframework.boot:spring-boot-starter-aop')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.mockito:mockito-core:2.7.22')
	
}



defaultTasks 'bootRun'

group = 'com.b2b.assignment'
version = '0.0.1-SNAPSHOT'

description = ''

bootWar {
	mainClassName = 'com.b2b.assignment.B2bFoodGroupApplication'
}

war {

}

springBoot {
	mainClassName = 'com.b2b.assignment.B2bFoodGroupApplication'
	buildInfo()
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
task copyDockerFiles(type: Copy) {
	description = "Copy Dockerfile and required data to build directory"
	from 'src/main/docker'
	from "${project.buildDir}/libs"
	into { "${project.buildDir}/docker" }
	include "*"
	exclude "**/*.yml"
}

task buildDocker(type: DockerBuildImage, dependsOn: 'copyDockerFiles') {
	description = "Package application as Docker image"
	group = "Docker"
	inputDir = project.file("${project.buildDir}/docker")
}

def props = new Properties()
file("deploy.properties").withInputStream { props.load(it) }

task deployOnServer(type:Exec, dependsOn: 'build') {
	def ssh = props.getProperty('ssh.key')
	def deploy = "deploy-b2bfg-server.sh"
	executable "bash"
	args "-c", "sh ${deploy} ${ssh}"
}